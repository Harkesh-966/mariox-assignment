generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Overridden at runtime in PrismaService constructor
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String
  roles        String[] // string[] to keep simple; could normalize in separate table
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  documents Document[]

  // NEW: back-relation for jobs triggered by this user (optional)
  ingestionJobs IngestionJob[]
}

model Document {
  id          String   @id @default(uuid())
  ownerId     String
  title       String
  description String?
  url         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  // NEW: optional file metadata (non-breaking)
  storagePath  String?
  originalName String?
  mimeType     String?
  size         Int?

  // NEW: back-relation to ingestion jobs
  ingestionJobs IngestionJob[]

  @@index([ownerId])
}

model IngestionJob {
  id         String @id @default(uuid())
  documentId String
  status     String // keep existing string: 'queued' | 'running' | 'completed' | 'failed'
  progress   Int    @default(0)
  metadata   Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // NEW: proper relation to Document (documentId already exists)
  document Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  // NEW: who triggered (optional)
  triggeredById String?
  triggeredBy   User?   @relation(fields: [triggeredById], references: [id])

  // NEW: pause flag (optional, non-breaking)
  paused Boolean @default(false)

  @@index([documentId])
  @@index([triggeredById])
}
